import os
import sys
import pandas as pd
import csv
import statsmodels.api as sm
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from pandas.plotting import table 
import torch

# Define the path where config.py is located
config_path = os.getcwd()
print(config_path)

# Add this path to the sys.path
sys.path.append(config_path)

# Now Python knows where to find config.py
import config

#BERT Model
database_file = config.database
database_folder = config.database_folder
bert_models = config.bert_models
bert_models_local = config.bert_models_local

Body = config.Body
Model = config.Model
Model_Subfolder = f'/{Body} Texts/{Model}'
Model_Folder = config.texts
Model_Folder = Model_Folder + Model_Subfolder
print(Model_Folder)

#-------------------------------------------------------------------------------------------------------------------
df = pd.read_csv(f"{Model_Folder}/{Model}_texts.csv")  
docs = df["segment"].to_list()
timestamps = df['date'].to_list()
type = df['type'].to_list()

#Initial Model
topic_model = torch.load(f"{bert_models_local}/{Body}/{Model}/topic_model_{Model}.pt")

#Edited Model
topic_model= torch.load(f"{bert_models_local}/{Body}/{Model}/topic_model_{Model}_edited.pt")
print("Done Loading Model")

# #Merge Topics
# topics_to_merge = [3, 24]

# topic_model.merge_topics(docs, topics_to_merge)
# print("Done Merging Topics")

topic_nums = [0, 1, 2, 3, 4]
display = 8
#display = len(topic_nums)

topic_model.set_topic_labels({0: "Employment", 
                              1: "Housing", 
                              2: "Banking", 
                              3: "Inflation", 
                              4: "Agriculture", 
                              5: "Transportation", 
                              6: "Growth", 
                              7: "Oil"})
topic_model.custom_labels_

#Save topics per class barchart as HTML file
topic_model.visualize_barchart(top_n_topics = display, 
                               n_words=10,
                               #topics = topic_nums,
                               custom_labels=True
                               ).write_html(f"{bert_models}/barchart.html")
print("Barchart Saved")

torch.save(topic_model, f"{bert_models_local}/{Body}/{Model}/topic_model_{Model}_edited.pt")
print("Done Saving Model")

similar_topics, similarity = topic_model.find_topics("interest", top_n=8)
print(topic_model.get_topic(similar_topics[1]))



topics_over_time = topic_model.topics_over_time(docs, timestamps, nr_bins=50)
#save topics over time graph as HTML file
topic_model.visualize_topics_over_time(topics_over_time, top_n_topics=display).write_html(f"{bert_models}/topics_over_time.html")
exit()
# Save intertopic distance map as HTML file
topic_model.visualize_topics().write_html(f"{bert_models}/intertopic_dist_map.html")

# Save topic-terms barcharts as HTML file
topic_model.visualize_barchart(top_n_topics = display, n_words=8).write_html(f"{bert_models}/barchart.html")

# Save documents projection as HTML file
topic_model.visualize_documents(docs).write_html(f"{bert_models}/projections.html")

# Save topics dendrogram as HTML file
topic_model.visualize_hierarchy().write_html(f"{bert_models}/hieararchy.html")
print("All Visuals Done")

