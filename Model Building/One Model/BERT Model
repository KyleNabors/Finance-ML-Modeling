import os 
import sys
import json
import pandas as pd
import numpy as np

from bertopic import BERTopic
from sentence_transformers import SentenceTransformer
from hdbscan import HDBSCAN
from bertopic.representation import KeyBERTInspired, MaximalMarginalRelevance, TextGeneration
from bertopic.vectorizers import ClassTfidfTransformer

from sklearn.feature_extraction.text import CountVectorizer
from umap import UMAP
import torch 
import nltk
import spacy

from datetime import datetime

nlp = spacy.load("en_core_web_lg")

nltk.download('stopwords') 

# NLTK English stopwords
stopwords = nltk.corpus.stopwords.words('english')

#Find and import config file
config_path = os.getcwd()
sys.path.append(config_path)
import config

#Variables, Paramaters, and Pathnames needed for this script
database_file = config.database
database_folder = config.database_folder
bert_models = config.bert_models
bert_models_local = config.bert_models_local

Body = config.Body
Model = config.Model
Model_Subfolder = f'/{Body} Texts/{Model}'
Model_Folder = config.texts
Model_Folder = Model_Folder + Model_Subfolder
print(Model_Folder)

#-------------------------------------------------------------------------------------------------------------------
df = pd.read_csv(f"{Model_Folder}/{Model}_texts.csv")  
docs = df["segment"].to_list()
timestamps = df['date'].to_list()
type = df['type'].to_list()

#-------------------------------------------------------------------------------------------------------------------
# df = pd.read_csv(f"{Model_Folder}/{Model}_texts.csv", sep=";", encoding='cp1252')  
# docs = df["firstPart"].to_list()
# timestamps = df['date'].to_list()
# type = df['president'].to_list()

#-------------------------------------------------------------------------------------------------------------------
# df = pd.read_csv("/Users/kylenabors/Documents/Database/Training Data/Fed/Press Confrences/press_conference_transcript.csv")

# # Specify the year and month you want to start and end processing files from
# start_year_month_day = '2006-12-31'
# end_year_month_day = '2023-12-31'
# df = df[df['meeting_date'] >= start_year_month_day]
# df = df[df['meeting_date'] <= end_year_month_day]

# docs = df["text"].to_list()
# timestamps = df['meeting_date'].to_list()
# type = df['document_kind'].to_list()

#-------------------------------------------------------------------------------------------------------------------

topic_list = [
    ['interest', 'rate', 'target', 'increase'],
    ['credit'],
    ['inflation'],
    ['unemployment'],
    ['market'],
    ['trade'],
    ['energy'],
]

keywords = config.keywords

# Embedding
embedding_model = SentenceTransformer("all-MiniLM-L6-v2")
embeddings = embedding_model.encode(docs, batch_size=10, show_progress_bar=True)

#Reduce Dimensionality
umap_model = UMAP(n_neighbors=5, 
                  n_components=2, 
                  metric='cosine', 
                  n_epochs=500,
                  min_dist=0.0, 
                  target_metric_kwds=keywords, 
                  target_weight=0.95, 
                  verbose=True)

# Clustering model
cluster_model = HDBSCAN(min_cluster_size = 15, 
                        min_samples=10,
                        metric = 'euclidean', 
                        cluster_selection_method = 'eom', 
                        prediction_data = True)

#Representation model
representation_model = MaximalMarginalRelevance(diversity=0.5)

#Create UMAP model
vectorizer_model = CountVectorizer(stop_words=stopwords, ngram_range=(1, 3))

ctfidf_model = ClassTfidfTransformer(bm25_weighting=True)

print("Done Preprocessing Data")
# BERTopic model
topic_model = BERTopic(language= 'english',
                       min_topic_size=15,
                       n_gram_range=(1, 3),
                       nr_topics = 64,
                       #seed_topic_list=topic_list,
                       embedding_model=embedding_model,
                       umap_model=umap_model,
                       hdbscan_model=cluster_model,
                       vectorizer_model=vectorizer_model,
                       ctfidf_model=ctfidf_model,
                       representation_model=representation_model,
                       verbose=True
                       ).fit(docs, embeddings = embeddings)

print("Done Creating BERTopic Model")

torch.save(topic_model, f"{bert_models_local}/{Body}/{Model}/topic_model_{Model}.pt")

similar_topics, similarity = topic_model.find_topics("interest", top_n=8)
print(topic_model.get_topic(similar_topics[1]))

topics_per_class = topic_model.topics_per_class(docs, classes=type)
topic_model.visualize_topics_per_class(topics_per_class, top_n_topics=32).write_html(f"{bert_models}/topics_per_class.html")

topics_over_time = topic_model.topics_over_time(docs, timestamps, nr_bins=200)
#save topics over time graph as HTML file
topic_model.visualize_topics_over_time(topics_over_time, top_n_topics=32).write_html(f"{bert_models}/topics_over_time.html")

# Save intertopic distance map as HTML file
topic_model.visualize_topics().write_html(f"{bert_models}/intertopic_dist_map.html")

# Save topic-terms barcharts as HTML file
topic_model.visualize_barchart(top_n_topics = 32, n_words=8).write_html(f"{bert_models}/barchart.html")

# Save documents projection as HTML file
topic_model.visualize_documents(docs).write_html(f"{bert_models}/projections.html")

# Save topics dendrogram as HTML file
topic_model.visualize_hierarchy().write_html(f"{bert_models}/hieararchy.html")

#
print("All Visuals Done")

