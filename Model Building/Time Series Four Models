import os
import sys
import pandas as pd
import statsmodels.api as sm
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from pandas.plotting import table 

# Define the path where config.py is located
config_path = '/Users/kylenabors/Documents/GitHub/MS-Thesis'

# Add this path to the sys.path
sys.path.append(config_path)

# Now Python knows where to find config.py
import config

#Variables, Paramaters, and Pathnames needed for this script
fed_funds_folder = config.fed_funds_folder 
sp500_folder = config.sp500_folder
fed_funds = config.fed_funds
df = config.df_keyword_info_ts
sp500 = config.sp500
folders = config.four_model_graph_folders
year_ranges = config.year_ranges


# Convert 'DATE' to datetime format and format to year and month
fed_funds['DATE'] = pd.to_datetime(fed_funds['DATE']).dt.strftime('%Y-%m')

# Set 'DATE' as the index
fed_funds.set_index('DATE', inplace=True)

# Convert 'Date' to datetime format and format to year and month
sp500['Date'] = pd.to_datetime(sp500['Date']).dt.strftime('%Y-%m')

# Set 'Date' as the index
sp500.set_index('Date', inplace=True)

# Sort S&P 500 data
sp500 = sp500.sort_index(ascending=True)

# Rename Value column
sp500.rename(columns={'Value': 'S&P 500'}, inplace=True)

# Prepare a DataFrame to hold correlation results
correlation_df = pd.DataFrame(columns=['Year_Range', 'Keyword', 'Correlation'])

# For each model
for i, range_ in enumerate(year_ranges, start=1):
    # Load your data
    df = pd.read_csv(f'/Users/kylenabors/Documents/MS-Thesis Data/Database/Fed Data/Four Models/keyword_info_ts_{range_[0]}_{range_[1]}.csv')

    # Convert 'Year-Month' to datetime format and format to year and month
    df['Year-Month'] = pd.to_datetime(df['Year-Month']).dt.strftime('%Y-%m')

    # Set 'Year-Month' as the index
    df.set_index('Year-Month', inplace=True)

    # Merge the datasets
    merged_df_fed = df.merge(fed_funds, left_index=True, right_index=True, how='inner')
    merged_df_sp500 = df.merge(sp500, left_index=True, right_index=True, how='inner')
    # Get the unique keywords
    keywords = df['Keyword'].unique()

    # Fit an ARIMA model for each keyword
    for keyword in keywords:
        df_keyword = df[df['Keyword'] == keyword]
        df_keyword = df_keyword.groupby('Year-Month').sum()

        # Fit an ARIMA model
        model = ARIMA(df_keyword['Frequency'], order=(1,0,0))
        model_fit = model.fit()

        # Print out summary information on the fit
        print(f"ARIMA Model for Keyword: {keyword}")
        print(model_fit.summary())
        print("\n")

        for merged_df, label, filename_suffix in [
            (merged_df_fed, 'FEDFUNDS', 'fedfunds'),
            (merged_df_sp500, 'S&P 500', 'sp500')
        ]:

            merged_df_keyword = merged_df[merged_df['Keyword'] == keyword]

            fig, ax1 = plt.subplots()

            # Ensure the index is treated as a date
            df_keyword.index = pd.to_datetime(df_keyword.index)

            # Plot frequency
            ax1.plot(df_keyword.index, df_keyword['Frequency'], label='Frequency')

            # Create a second y-axis and plot the comparative data
            ax2 = ax1.twinx()
            ax2.plot(pd.to_datetime(merged_df_keyword.index), merged_df_keyword[label], color='tab:green', label=label)

            # Set x-axis labels
            years = mdates.YearLocator(1)   # every year
            years_fmt = mdates.DateFormatter('%Y')
            ax1.xaxis.set_major_locator(years)
            ax1.xaxis.set_major_formatter(years_fmt)

            # Rotate x-axis labels
            plt.setp(ax1.get_xticklabels(), rotation=45)

            # Add title and legends
            ax1.set_title(f"Frequency and {label} for Keyword: {keyword}")
            ax1.legend(loc="upper left")
            ax2.legend(loc="upper right")

            # Save the plot
            plt.savefig(f"{folders[i-1]}/{keyword}_{filename_suffix}_plot.png")

            plt.close(fig)

        # Compute correlations for each keyword
        merged_df_fed_keyword = merged_df_fed[merged_df_fed['Keyword'] == keyword]
        correlations = merged_df_fed_keyword[['Frequency', 'FEDFUNDS']].corr().iloc[0,1]
        
        # Append the result to the DataFrame
        correlation_df = pd.concat([correlation_df, pd.DataFrame({
            'Year_Range': [f'{range_[0]}_{range_[1]}'],
            'Keyword': [keyword],
            'Correlation': [correlations]
        })], ignore_index=True)

# Print the correlation DataFrame
print(correlation_df)

# Convert the correlation DataFrame to four decimal places
correlation_df = correlation_df.round(4)

# Create a subplot with no visible axis
fig, ax = plt.subplots(1,1)
ax.axis('tight')
ax.axis('off')

# Create a table and save as a .png file
the_table = table(ax, correlation_df, loc='center', cellLoc = 'center', colWidths=[0.2]*len(correlation_df.columns))
plt.savefig(f"/Users/kylenabors/Documents/GitHub/MS-Thesis/Models/Fed Models/Four Models/Graphs/Correlation Table.png")

correlation_df.to_excel(f"/Users/kylenabors/Documents/GitHub/MS-Thesis/Models/Fed Models/Four Models/Graphs/Correlation Table.xlsx", index=False)