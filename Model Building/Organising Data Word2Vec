# Import necessary libraries
import sys
import os
import json
import pdfplumber
import csv
from collections import defaultdict, Counter
from gensim.utils import simple_preprocess
from gensim.models import Word2Vec
import spacy
import csv
import nltk
from nltk.corpus import words

nlp = spacy.load("en_core_web_lg")

nltk.download('words')
hyphenated_words = set(word for word in words.words() if '-' in word)

# Define the path where config.py is located
config_path = '/Users/kylenabors/Documents/GitHub/MS-Thesis'

# Add this path to the sys.path
sys.path.append(config_path)

# Now Python knows where to find config.py
import config

#Variables, Paramaters, and Pathnames needed for this script
database_file = config.database
keyword_freq_ts = config.keyword_freq_ts

# Load data from the JSON database
def load_data(file):
    with open(file, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data

# Write data to a JSON file
def write_data(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

# Load the processed data
segments = load_data("/Users/kylenabors/Documents/MS-Thesis Data/Database/Fed Data/fed_data.json")

# Build a Word2Vec model from the processed data
model = Word2Vec(segments, min_count=200, workers=10, window=5, sg=1, epochs= 20)

# Save the Word2Vec model
model.save("/Users/kylenabors/Documents/GitHub/MS-Thesis/Models/Fed Models/fed_word2vec.model")

# Load the saved Word2Vec model
model = Word2Vec.load("/Users/kylenabors/Documents/GitHub/MS-Thesis/Models/Fed Models/fed_word2vec.model")

# Find the top 10 words similar to a given list of keywords
keywords = config.keywords
results = []
for keyword in keywords:
    res = model.wv.similar_by_word(keyword, topn=10)
    for item in res:
        results.append([keyword] + list(item))
        
# Save the results in a CSV file
with open('/Users/kylenabors/Documents/GitHub/MS-Thesis/Models/Fed Models/One Model/Similar Words/similar_words.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["Keyword", "Similar Word", "Similarity"])
    writer.writerows(results)

# List to hold training data
train_data = []
keyword_dict = {keyword: i+1 for i, keyword in enumerate(keywords)}
keyword_freq = Counter()

# Filter the processed data based on search words
for segment in segments:
    for word in keywords:
        if word in segment:
            segment = " ".join(segment)
            train_data.append((segment, keyword_dict[word]))
            keyword_freq[word] += 1

# Write the training data to a JSON file
write_data("/Users/kylenabors/Documents/MS-Thesis Data/Database/Fed Data/fed_data_train.json", train_data)

# Write keyword information to a CSV file
with open("/Users/kylenabors/Documents/MS-Thesis Data/Database/Fed Data/keyword_info.csv", "w", newline="") as csvfile:
    fieldnames = ['Keyword', 'Number', 'Frequency']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()
    for keyword, number in keyword_dict.items():
        writer.writerow({'Keyword': keyword, 'Number': number, 'Frequency': keyword_freq[keyword]})

# Create a set of all year-month values
year_month_day_set = set(keyword_freq_ts.keys())

# Create a set of all document types
doc_types_list = set()
for year_month, doc_types in keyword_freq_ts.items():
    for doc_type in doc_types.keys():
        doc_types_list.add(doc_type)

with open("/Users/kylenabors/Documents/MS-Thesis Data/Database/Fed Data/keyword_info_ts.csv", "w", newline="") as csvfile:
    fieldnames = ['Year-Month-Day', 'Type', 'Keyword', 'Frequency']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()
    
    for year_month_day in year_month_day_set:
        for doc_type in doc_types_list:
            for keyword in keywords:
                # Set default frequency to 0
                freq = 0
                
                # If the year-month and keyword exist in the data, update the frequency
                if year_month_day in keyword_freq_ts and doc_type in keyword_freq_ts[year_month_day] and keyword in keyword_freq_ts[year_month_day][doc_type]:
                    freq = keyword_freq_ts[year_month_day][doc_type][keyword]
                
                writer.writerow({'Year-Month-Day': year_month_day, 'Type': doc_type, 'Keyword': keyword, 'Frequency': freq})
