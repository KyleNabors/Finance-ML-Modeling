# Import necessary libraries
import json
import pdfplumber
import csv
from collections import defaultdict, Counter
from gensim.utils import simple_preprocess
from gensim.models import Word2Vec
import spacy

nlp = spacy.load("en_core_web_sm")

# Load data from the JSON database
def load_data(file):
    with open(file, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data

# Write data to a JSON file
def write_data(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

# Define the file path of your JSON database
database_file = "/Users/kylenabors/Documents/GitHub/MS-Thesis/Database/fed_database.json"

# Load the data from the JSON database
database_data = load_data(database_file)

# Define accepted types
accepted_types = ['Beige Book']  # replace these with actual types

# Extract file paths from the database data
files = [(entry["path"], entry["date"][:7], entry["type"]) for entry in database_data if "path" in entry and entry["type"] in accepted_types] 

# List to hold processed segments from the PDF files
final = []

# Process each PDF file
keyword_freq_ts = defaultdict(lambda: defaultdict(Counter))
for file, year_month, doc_type in files:
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            doc = nlp(text)  # pass the text into the Spacy NLP model
            segments = text.split(". ")
            for segment in segments:
                segment = [token.lemma_ for token in doc if token.pos_ not in ['PROPN', 'PUNCT'] and len(token.orth_) > 4]  
                # the above line transforms each word to its base form (lemma), excludes proper nouns (abbreviations often are tagged as such) and punctuation, and also excludes words with less than 3 characters
                if len(segment) > 15:
                    final.append(segment)
                    for word in segment:
                        keyword_freq_ts[year_month][doc_type][word] += 1


# Write the processed data to a JSON file
write_data("/Users/kylenabors/Documents/GitHub/MS-Thesis/Database/Fed Data/fed_data.json", final)

# Load the processed data
segments = load_data("/Users/kylenabors/Documents/GitHub/MS-Thesis/Database/Fed Data/fed_data.json")

# Build a Word2Vec model from the processed data
model = Word2Vec(segments, min_count=15, workers=10, window=20, sg=1)

# Save the Word2Vec model
model.save("/Users/kylenabors/Documents/GitHub/MS-Thesis/Models/Fed Models/fed_word2vec.model")

# Load the saved Word2Vec model
model = Word2Vec.load("/Users/kylenabors/Documents/GitHub/MS-Thesis/Models/Fed Models/fed_word2vec.model")

# Find and print the top 10 words similar to a given list of keywords
keywords = ["interest", "rate", "inflation"]  # define your list of keywords here
for keyword in keywords:
    res = model.wv.similar_by_word(keyword, topn=10)
    print(f"For the keyword '{keyword}', the top 10 similar words are:")
    for item in res:
        print(item)
    print("\n")

# List to hold training data
train_data = []
keyword_dict = {keyword: i+1 for i, keyword in enumerate(keywords)}
keyword_freq = Counter()

# Filter the processed data based on search words
for segment in segments:
    for word in keywords:
        if word in segment:
            segment = " ".join(segment)
            train_data.append((segment, keyword_dict[word]))
            keyword_freq[word] += 1

# Write the training data to a JSON file
write_data("/Users/kylenabors/Documents/GitHub/MS-Thesis/Database/Fed Data/fed_data_train.json", train_data)

# Write keyword information to a CSV file
with open("/Users/kylenabors/Documents/GitHub/MS-Thesis/Database/Fed Data/keyword_info.csv", "w", newline="") as csvfile:
    fieldnames = ['Keyword', 'Number', 'Frequency']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()
    for keyword, number in keyword_dict.items():
        writer.writerow({'Keyword': keyword, 'Number': number, 'Frequency': keyword_freq[keyword]})

# Write keyword frequency by year-month and type to a CSV file
with open("/Users/kylenabors/Documents/GitHub/MS-Thesis/Database/Fed Data/keyword_info_ts.csv", "w", newline="") as csvfile:
    fieldnames = ['Year-Month', 'Type', 'Keyword', 'Frequency']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()
    for year_month, doc_types in keyword_freq_ts.items():
        for doc_type, word_counts in doc_types.items():
            for keyword, freq in word_counts.items():
                if keyword in keywords:  # only write the selected keywords to the CSV
                    writer.writerow({'Year-Month': year_month, 'Type': doc_type, 'Keyword': keyword, 'Frequency': freq})
