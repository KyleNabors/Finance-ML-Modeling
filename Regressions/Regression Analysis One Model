import os
import sys
import pandas as pd
import statsmodels.api as sm
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.pyplot as pyplot

# Define the path where config.py is located
config_path = '/Users/kylenabors/Documents/GitHub/MS-Thesis'

# Add this path to the sys.path
sys.path.append(config_path)

# Now Python knows where to find config.py
import config

#Variables, Paramaters, and Pathnames needed for this script
fed_models = config.fed_models
fed_funds_folder = config.fed_funds_folder 
sp500_folder = config.sp500_folder
sp500_change_folder = config.sp500_change_folder
fed_funds = config.fed_funds
df = config.df_keyword_info_ts
sp500 = config.sp500

#Fed Funds
# Convert 'DATE' to datetime format and format to year and month
fed_funds['DATE'] = pd.to_datetime(fed_funds['DATE']).dt.to_period('M')

# Set 'DATE' as the index
fed_funds.set_index('DATE', inplace=True)

#DF
# Convert 'Year-Month' to datetime format and format to year and month
df['Year-Month'] = pd.to_datetime(df['Year-Month']).dt.to_period('M')
df2 = df
# Set 'Year-Month' as the index
df.set_index('Year-Month', inplace=True)

#SP500
#Caculate monthly change 
sp500['Monthly Change of S&P 500'] = sp500['Value'].diff()
# Convert 'Date' to datetime format and format to year and month
sp500['Date'] = pd.to_datetime(sp500['Date']).dt.to_period('M')

# Set 'Date' as the index
sp500.set_index('Date', inplace=True)

# Sort S&P 500 data
sp500 = sp500.sort_index(ascending=True)

# Rename Value column
sp500.rename(columns={'Value': 'S&P 500'}, inplace=True)

sp500_change = sp500

# Merge the datasets
merged_df_fed = df.merge(fed_funds, left_index=True, right_index=True, how='inner')
merged_df_sp500 = df.merge(sp500, left_index=True, right_index=True, how='inner')
merged_df_sp500_change = df.merge(sp500_change, left_index=True, right_index=True, how='inner')

#Export for other regressions 


# Get the unique keywords
keywords = df['Keyword'].unique()

# Fit an ARIMA model for each keyword
for keyword in keywords:
    df_keyword = df[df['Keyword'] == keyword]
    df_keyword = df_keyword.groupby('Year-Month').sum()

    # Fit an ARIMA model
    model = ARIMA(df_keyword['Frequency'], order=(1,0,0))
    model_fit = model.fit()

    # Print out summary information on the fit
    print(f"ARIMA Model for Keyword: {keyword}")
    print(model_fit.summary())
    print("\n")

    for merged_df, label, ylim, filename_suffix in [
        (merged_df_fed, 'FEDFUNDS', (0, 10), 'fedfunds'),
        (merged_df_sp500, 'S&P 500', (500, 5000), 'sp500'),
        (merged_df_sp500_change, 'Monthly Change of S&P 500', (-500, 500), 'sp500_change')
    ]:

        merged_df_keyword = merged_df[merged_df['Keyword'] == keyword]

        fig, ax1 = plt.subplots()

        # Plot frequency
        ax1.plot(df_keyword.index.to_timestamp(), df_keyword['Frequency'], label='Frequency')

        # Create a second y-axis and plot the comparative data
        ax2 = ax1.twinx()
        ax2.plot(merged_df_keyword.index.to_timestamp(), merged_df_keyword[label], color='tab:red', label=label)
        ax2.set_ylim(ylim)

        # Set x-axis labels
        years = mdates.YearLocator(1)
        years_fmt = mdates.DateFormatter('%Y')
        ax1.xaxis.set_major_locator(years)
        ax1.xaxis.set_major_formatter(years_fmt)

        # Rotate x-axis labels
        plt.setp(ax1.get_xticklabels(), rotation=45)

        # Add title and legends
        ax1.set_title(f"Frequency and {label} for Keyword: {keyword}")
        ax1.legend(loc="upper left")
        ax2.legend(loc="upper right")

        # Save the plot
        if filename_suffix == 'fedfunds':
            plt.savefig(f"{fed_funds_folder}/{keyword}_{filename_suffix}_plot.png")
        elif filename_suffix == 'sp500':
            plt.savefig(f"{sp500_folder}/{keyword}_{filename_suffix}_plot.png")
        elif filename_suffix == 'sp500_change':
            plt.savefig(f"{sp500_change_folder}/{keyword}_{filename_suffix}_plot.png")
        plt.close(fig)



